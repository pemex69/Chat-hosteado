{
  "version": 3,
  "sources": ["../../nextjs-websocket/src/socketNext.js", "../../nextjs-websocket/src/index.js"],
  "sourcesContent": ["import React, { useRef, useEffect, useState } from 'react'\n\nvar W3CWebSocket = require('websocket').w3cwebsocket\n\nconst WebSocketNext = (props) => {\n  const didMountRef = useRef(false)\n  const [ws, setWS] = useState(new W3CWebSocket(props.url))\n  const [attempts, setAttempts] = useState(1)\n  const [reconnect, setReconnect] = useState(props.reconnect)\n  const [timeoutID, setTimeoutID] = useState(-1)\n\n  useEffect(() => {\n    if (!didMountRef.current) {\n      didMountRef.current = true\n      setupWebsocket()\n    } else {\n      return () => {\n        setReconnect(false)\n        clearTimeout(timeoutID)\n        ws.close()\n      }\n    }\n  }, [])\n\n  const setupWebsocket = () => {\n    ws.onopen = () => {\n      if (typeof props.onOpen === 'function') props.onOpen()\n    }\n    ws.onerror = (e) => {\n      if (typeof props.onError === 'function') props.onError(e)\n    }\n    ws.onmessage = (evt) => {\n      props.onMessage(evt.data)\n    }\n    ws.onclose = (evt) => {\n      if (typeof props.onClose === 'function') {\n        props.onClose(evt.code, evt.reason)\n      }\n      if (reconnect) {\n        const tid = setTimeout(() => {\n          setAttempts(attempts + 1)\n          setWS(new W3CWebSocket(props.url))\n          setupWebsocket()\n        }, props.reconnectIntervalInMilliSeconds || 3000)\n        setTimeoutID(tid)\n      }\n    }\n  }\n\n  return <div />\n}\n\nexport { WebSocketNext }\n", "import React from 'react'\n\nimport { WebSocketNext } from './socketNext'\n\nvar W3CWebSocket = require('websocket').w3cwebsocket\n\nclass WebSocket extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ws: new W3CWebSocket(this.props.url),\n      attempts: 1\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n    this.setupWebsocket = this.setupWebsocket.bind(this)\n  }\n\n  logging(logline) {\n    if (this.props.debug === true) {\n      console.log(logline)\n    }\n  }\n\n  generateInterval(k) {\n    if (this.props.reconnectIntervalInMilliSeconds > 0) {\n      return this.props.reconnectIntervalInMilliSeconds\n    }\n    return Math.min(30, Math.pow(2, k) - 1) * 1000\n  }\n\n  setupWebsocket() {\n    let websocket = this.state.ws\n\n    websocket.onopen = () => {\n      this.logging('Websocket connected...')\n      if (typeof this.props.onOpen === 'function') this.props.onOpen()\n    }\n\n    websocket.onerror = (e) => {\n      if (typeof this.props.onError === 'function') this.props.onError(e)\n    }\n\n    websocket.onmessage = (evt) => {\n      this.props.onMessage(evt.data)\n    }\n\n    this.shouldReconnect = this.props.reconnect\n    websocket.onclose = (evt) => {\n      this.logging(\n        `Websocket disconnected,the reason: ${evt.reason},the code: ${evt.code}`\n      )\n      if (typeof this.props.onClose === 'function')\n        this.props.onClose(evt.code, evt.reason)\n      if (this.shouldReconnect) {\n        let time = this.generateInterval(this.state.attempts)\n        this.timeoutID = setTimeout(() => {\n          this.setState({ attempts: this.state.attempts + 1 })\n          this.setState({ ws: new W3CWebSocket(this.props.url) })\n          this.setupWebsocket()\n        }, time)\n      }\n    }\n  }\n\n  componentDidMount() {\n    const { childRef } = this.props\n    childRef && childRef(this)\n\n    this.setupWebsocket()\n  }\n\n  componentWillUnmount() {\n    const { childRef } = this.props\n    childRef && childRef(undefined)\n\n    this.shouldReconnect = false\n    clearTimeout(this.timeoutID)\n\n    let websocket = this.state.ws\n    websocket.close()\n  }\n\n  sendMessage(message) {\n    let websocket = this.state.ws\n    websocket.send(message)\n  }\n\n  render() {\n    return <div></div>\n  }\n}\n\nexport { WebSocket, WebSocketNext }\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,QAAIA,eAAeC,kBAAqBC;QAElCC,gBAAgB,SAAhBA,eAAiBC,OAAU;AAC/B,UAAMC,cAAcC,MAAAA,OAAO,KAAK;AAChC,UAAA,YAAoBC,MAAAA,SAAS,IAAIP,aAAaI,MAAMI,GAAG,CAAC,GAAjDC,KAAE,UAAA,CAAA,GAAEC,QAAK,UAAA,CAAA;AAChB,UAAA,aAAgCH,MAAAA,SAAS,CAAC,GAAnCI,WAAQ,WAAA,CAAA,GAAEC,cAAW,WAAA,CAAA;AAC5B,UAAA,aAAkCL,MAAAA,SAASH,MAAMS,SAAS,GAAnDA,YAAS,WAAA,CAAA,GAAEC,eAAY,WAAA,CAAA;AAC9B,UAAA,aAAkCP,MAAAA,SAAS,EAAE,GAAtCQ,YAAS,WAAA,CAAA,GAAEC,eAAY,WAAA,CAAA;AAE9BC,YAAAA,UAAU,WAAM;AACd,YAAI,CAACZ,YAAYa,SAAS;AACxBb,sBAAYa,UAAU;AACtBC,yBAAc;eACT;AACL,iBAAO,WAAM;AACXL,yBAAa,KAAK;AAClBM,yBAAaL,SAAS;AACtBN,eAAGY,MAAK;;;SAGX,CAAA,CAAE;AAEL,UAAMF,iBAAiB,SAAjBA,kBAAuB;AAC3BV,WAAGa,SAAS,WAAM;AAChB,cAAI,OAAOlB,MAAMmB,WAAW;AAAYnB,kBAAMmB,OAAM;;AAEtDd,WAAGe,UAAU,SAACC,GAAM;AAClB,cAAI,OAAOrB,MAAMsB,YAAY;AAAYtB,kBAAMsB,QAAQD,CAAC;;AAE1DhB,WAAGkB,YAAY,SAACC,KAAQ;AACtBxB,gBAAMyB,UAAUD,IAAIE,IAAI;;AAE1BrB,WAAGsB,UAAU,SAACH,KAAQ;AACpB,cAAI,OAAOxB,MAAM4B,YAAY,YAAY;AACvC5B,kBAAM4B,QAAQJ,IAAIK,MAAML,IAAIM,MAAM;;AAEpC,cAAIrB,WAAW;AACb,gBAAMsB,MAAMC,WAAW,WAAM;AAC3BxB,0BAAYD,WAAW,CAAC;AACxBD,oBAAM,IAAIV,aAAaI,MAAMI,GAAG,CAAC;AACjCW,cAAAA,gBAAc;eACbf,MAAMiC,mCAAmC,GAAI;AAChDrB,yBAAamB,GAAG;;;;AAKtB,aAAOG,eAAAA,cAAAA,OAAAA,IAAAA;IACT;AC9CA,QAAItC,iBAAeC,kBAAqBC;AAAY,QAE9CqC,YAAS,SAAA,kBAAA;AAAA,qBAAAA,YAAA,gBAAA;AACb,eAAAA,WAAYnC,OAAO;AAAA,YAAA;AACjB,gBAAA,iBAAA,KAAA,MAAMA,KAAK,KAAC;AACZ,cAAKoC,QAAQ;UACX/B,IAAI,IAAIT,eAAa,MAAKI,MAAMI,GAAG;UACnCG,UAAU;;AAEZ,cAAK8B,cAAc,MAAKA,YAAYC,KAAI,uBAAA,KAAA,CAAA;AACxC,cAAKvB,iBAAiB,MAAKA,eAAeuB,KAAI,uBAAA,KAAA,CAAA;AAAM,eAAA;;AACrD,UAAA,SAAAH,WAAA;AAAA,aAEDI,UAAA,SAAA,QAAQC,SAAS;AACf,YAAI,KAAKxC,MAAMyC,UAAU,MAAM;AAC7BC,kBAAQC,IAAIH,OAAO;;;AAEtB,aAEDI,mBAAA,SAAA,iBAAiBC,GAAG;AAClB,YAAI,KAAK7C,MAAMiC,kCAAkC,GAAG;AAClD,iBAAO,KAAKjC,MAAMiC;;AAEpB,eAAOa,KAAKC,IAAI,IAAID,KAAKE,IAAI,GAAGH,CAAC,IAAI,CAAC,IAAI;;AAC3C,aAED9B,iBAAA,SAAA,iBAAiB;AAAA,YAAA,SAAA;AACf,YAAIkC,YAAY,KAAKb,MAAM/B;AAE3B4C,kBAAU/B,SAAS,WAAM;AACvB,iBAAKqB,QAAQ,wBAAwB;AACrC,cAAI,OAAO,OAAKvC,MAAMmB,WAAW;AAAY,mBAAKnB,MAAMmB,OAAM;;AAGhE8B,kBAAU7B,UAAU,SAACC,GAAM;AACzB,cAAI,OAAO,OAAKrB,MAAMsB,YAAY;AAAY,mBAAKtB,MAAMsB,QAAQD,CAAC;;AAGpE4B,kBAAU1B,YAAY,SAACC,KAAQ;AAC7B,iBAAKxB,MAAMyB,UAAUD,IAAIE,IAAI;;AAG/B,aAAKwB,kBAAkB,KAAKlD,MAAMS;AAClCwC,kBAAUtB,UAAU,SAACH,KAAQ;AAC3B,iBAAKe,QAAO,wCAC4Bf,IAAIM,SAAM,gBAAcN,IAAIK,IAAI;AAExE,cAAI,OAAO,OAAK7B,MAAM4B,YAAY;AAChC,mBAAK5B,MAAM4B,QAAQJ,IAAIK,MAAML,IAAIM,MAAM;AACzC,cAAI,OAAKoB,iBAAiB;AACxB,gBAAIC,OAAO,OAAKP,iBAAiB,OAAKR,MAAM7B,QAAQ;AACpD,mBAAKI,YAAYqB,WAAW,WAAM;AAChC,qBAAKoB,SAAS;gBAAE7C,UAAU,OAAK6B,MAAM7B,WAAW;eAAG;AACnD,qBAAK6C,SAAS;gBAAE/C,IAAI,IAAIT,eAAa,OAAKI,MAAMI,GAAG;eAAG;AACtD,qBAAKW,eAAc;eAClBoC,IAAI;;;;AAGZ,aAEDE,oBAAA,SAAA,oBAAoB;AAClB,YAAQC,WAAa,KAAKtD,MAAlBsD;AACRA,oBAAYA,SAAS,IAAI;AAEzB,aAAKvC,eAAc;;AACpB,aAEDwC,uBAAA,SAAA,uBAAuB;AACrB,YAAQD,WAAa,KAAKtD,MAAlBsD;AACRA,oBAAYA,SAASE,MAAS;AAE9B,aAAKN,kBAAkB;AACvBlC,qBAAa,KAAKL,SAAS;AAE3B,YAAIsC,YAAY,KAAKb,MAAM/B;AAC3B4C,kBAAUhC,MAAK;;AAChB,aAEDoB,cAAA,SAAA,YAAYoB,SAAS;AACnB,YAAIR,YAAY,KAAKb,MAAM/B;AAC3B4C,kBAAUS,KAAKD,OAAO;;AACvB,aAEDE,SAAA,SAAA,SAAS;AACP,eAAOzB,eAAAA,cAAAA,OAAAA,IAAAA;;AACR,aAAAC;IAAA,EAnFqBD,eAAM0B,SAAS;;;;;",
  "names": ["W3CWebSocket", "require", "w3cwebsocket", "WebSocketNext", "props", "didMountRef", "useRef", "useState", "url", "ws", "setWS", "attempts", "setAttempts", "reconnect", "setReconnect", "timeoutID", "setTimeoutID", "useEffect", "current", "setupWebsocket", "clearTimeout", "close", "onopen", "onOpen", "onerror", "e", "onError", "onmessage", "evt", "onMessage", "data", "onclose", "onClose", "code", "reason", "tid", "setTimeout", "reconnectIntervalInMilliSeconds", "React", "WebSocket", "state", "sendMessage", "bind", "logging", "logline", "debug", "console", "log", "generateInterval", "k", "Math", "min", "pow", "websocket", "shouldReconnect", "time", "setState", "componentDidMount", "childRef", "componentWillUnmount", "undefined", "message", "send", "render", "Component"]
}
