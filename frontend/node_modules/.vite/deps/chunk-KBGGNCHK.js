import {
  require_browser
} from "./chunk-5A3NVUSK.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS
} from "./chunk-CEQRFMJQ.js";

// node_modules/nextjs-websocket/dist/index.js
var require_dist = __commonJS({
  "node_modules/nextjs-websocket/dist/index.js"(exports) {
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require_react();
    var React__default = _interopDefault(React);
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    var W3CWebSocket = require_browser().w3cwebsocket;
    var WebSocketNext = function WebSocketNext2(props) {
      var didMountRef = React.useRef(false);
      var _useState = React.useState(new W3CWebSocket(props.url)), ws = _useState[0], setWS = _useState[1];
      var _useState2 = React.useState(1), attempts = _useState2[0], setAttempts = _useState2[1];
      var _useState3 = React.useState(props.reconnect), reconnect = _useState3[0], setReconnect = _useState3[1];
      var _useState4 = React.useState(-1), timeoutID = _useState4[0], setTimeoutID = _useState4[1];
      React.useEffect(function() {
        if (!didMountRef.current) {
          didMountRef.current = true;
          setupWebsocket();
        } else {
          return function() {
            setReconnect(false);
            clearTimeout(timeoutID);
            ws.close();
          };
        }
      }, []);
      var setupWebsocket = function setupWebsocket2() {
        ws.onopen = function() {
          if (typeof props.onOpen === "function")
            props.onOpen();
        };
        ws.onerror = function(e) {
          if (typeof props.onError === "function")
            props.onError(e);
        };
        ws.onmessage = function(evt) {
          props.onMessage(evt.data);
        };
        ws.onclose = function(evt) {
          if (typeof props.onClose === "function") {
            props.onClose(evt.code, evt.reason);
          }
          if (reconnect) {
            var tid = setTimeout(function() {
              setAttempts(attempts + 1);
              setWS(new W3CWebSocket(props.url));
              setupWebsocket2();
            }, props.reconnectIntervalInMilliSeconds || 3e3);
            setTimeoutID(tid);
          }
        };
      };
      return React__default.createElement("div", null);
    };
    var W3CWebSocket$1 = require_browser().w3cwebsocket;
    var WebSocket = function(_React$Component) {
      _inheritsLoose(WebSocket2, _React$Component);
      function WebSocket2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.state = {
          ws: new W3CWebSocket$1(_this.props.url),
          attempts: 1
        };
        _this.sendMessage = _this.sendMessage.bind(_assertThisInitialized(_this));
        _this.setupWebsocket = _this.setupWebsocket.bind(_assertThisInitialized(_this));
        return _this;
      }
      var _proto = WebSocket2.prototype;
      _proto.logging = function logging(logline) {
        if (this.props.debug === true) {
          console.log(logline);
        }
      };
      _proto.generateInterval = function generateInterval(k) {
        if (this.props.reconnectIntervalInMilliSeconds > 0) {
          return this.props.reconnectIntervalInMilliSeconds;
        }
        return Math.min(30, Math.pow(2, k) - 1) * 1e3;
      };
      _proto.setupWebsocket = function setupWebsocket() {
        var _this2 = this;
        var websocket = this.state.ws;
        websocket.onopen = function() {
          _this2.logging("Websocket connected...");
          if (typeof _this2.props.onOpen === "function")
            _this2.props.onOpen();
        };
        websocket.onerror = function(e) {
          if (typeof _this2.props.onError === "function")
            _this2.props.onError(e);
        };
        websocket.onmessage = function(evt) {
          _this2.props.onMessage(evt.data);
        };
        this.shouldReconnect = this.props.reconnect;
        websocket.onclose = function(evt) {
          _this2.logging("Websocket disconnected,the reason: " + evt.reason + ",the code: " + evt.code);
          if (typeof _this2.props.onClose === "function")
            _this2.props.onClose(evt.code, evt.reason);
          if (_this2.shouldReconnect) {
            var time = _this2.generateInterval(_this2.state.attempts);
            _this2.timeoutID = setTimeout(function() {
              _this2.setState({
                attempts: _this2.state.attempts + 1
              });
              _this2.setState({
                ws: new W3CWebSocket$1(_this2.props.url)
              });
              _this2.setupWebsocket();
            }, time);
          }
        };
      };
      _proto.componentDidMount = function componentDidMount() {
        var childRef = this.props.childRef;
        childRef && childRef(this);
        this.setupWebsocket();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var childRef = this.props.childRef;
        childRef && childRef(void 0);
        this.shouldReconnect = false;
        clearTimeout(this.timeoutID);
        var websocket = this.state.ws;
        websocket.close();
      };
      _proto.sendMessage = function sendMessage(message) {
        var websocket = this.state.ws;
        websocket.send(message);
      };
      _proto.render = function render() {
        return React__default.createElement("div", null);
      };
      return WebSocket2;
    }(React__default.Component);
    exports.WebSocket = WebSocket;
    exports.WebSocketNext = WebSocketNext;
  }
});

export {
  require_dist
};
//# sourceMappingURL=chunk-KBGGNCHK.js.map
